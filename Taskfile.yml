version: "3"

vars:
  VERSION:
    sh: git describe --tags --abbrev=0
  GITHUB_USER: stefandanzl

tasks:
  build:
    desc: Build the application
    cmds:
      - go build -o ./build/server{{exeExt}} .

  run:
    desc: Run the application
    deps: [build]
    dir: build
    cmds:
      - ./server{{exeExt}}
    env:
      PORT: '{{.PORT | default "8080"}}'
      SUPER_ADMIN_KEY: '{{.SUPER_ADMIN_KEY | default "super_admin_key"}}'
      CONFIG_FILE_PATH: '{{.CONFIG_FILE_PATH | default "./config/config.json"}}'
      AUTO_SAVE_INTERVAL: '{{.AUTO_SAVE_INTERVAL | default "60"}}'

  test-unit:
    desc: Run unit tests
    cmds:
      - go test -v ./...

  test-api:
    desc: Run API functionality tests
    cmds:
      - bash ./tests/test-api.sh

  test-load:
    desc: Run load tests
    cmds:
      - bash ./tests/load-test.sh

  test-error:
    desc: Run error handling tests
    cmds:
      - bash ./tests/error-test.sh

  test:
    desc: Run all tests (alias for test-all)
    cmds:
      - task: test-all

  test-all:
    desc: Run all tests (unit tests, API tests, load tests, and error tests)
    dir: tests
    cmds:
      - bash ./run-all-tests.sh

  debug-config:
    desc: Debug configuration file issues
    cmds:
      - mkdir -p ./config
      - echo '{"test_user":{"cron":[],"data":{}}}' > ./config/config.json
      - echo "Created test configuration at ./config/config.json"
      - ls -la ./config

  version:
    cmds:
      - task: fetch-tags
      - echo {{.VERSION}}

  fetch-tags:
    cmds:
      - git fetch --tags

  bump-major:
    desc: "Bump the minor version and tag Git"
    vars:
      NEW_TAG:
        sh: echo {{.VERSION}} | awk -F. '{printf("%d.0.0", $1)}'
    cmds:
      - git tag -a "{{.NEW_TAG}}" -m "Release {{.NEW_TAG}}"

  bump-minor:
    desc: "Bump the minor version and tag Git"
    vars:
      NEW_TAG:
        sh: echo {{.VERSION}} | awk -F. '{printf("%d.%d.0", $1, $2+1)}'
    cmds:
      - git tag -a "{{.NEW_TAG}}" -m "Release {{.NEW_TAG}}"

  bump-patch:
    desc: "Bump the minor version and tag Git"
    vars:
      NEW_TAG:
        sh: echo {{.VERSION}} | awk -F. '{printf("%d.%d.%d", $1, $2, $3+1)}'
    cmds:
      - git tag -a "{{.NEW_TAG}}" -m "Release {{.NEW_TAG}}"

  # Multi-OS build tasks
  build-all:
    desc: "Build for all supported platforms"
    cmds:
      - cmd: rm dist/* -r
        ignore_error: true
      - task: build-windows-amd64
      - task: build-linux-amd64
      - task: build-linux-arm64
      - echo "All builds completed. Binaries are in ./dist/ directory"

  build-windows-amd64:
    desc: "Build for Windows AMD64"
    env:
      GOOS: windows
      GOARCH: amd64
    cmds:
      - go build -o ./dist/time-keypair_{{.VERSION}}_windows_amd64.exe .
      - echo "Windows AMD64 build complete"

  build-linux-amd64:
    desc: "Build for Linux AMD64"
    env:
      GOOS: linux
      GOARCH: amd64
    cmds:
      - go build -o ./dist/time-keypair_{{.VERSION}}_linux_amd64 .
      - echo "Linux AMD64 build complete"

  build-linux-arm64:
    desc: "Build for Linux ARM64"
    env:
      GOOS: linux
      GOARCH: arm64
    cmds:
      - go build -o ./dist/time-keypair_{{.VERSION}}_linux_arm64 .
      - echo "Linux ARM64 build complete"

  release:
    desc: "Commit Changes, create version tag, push to Github and create a new release on GitHub"
    cmds:
      - git add .
      - cmd: git commit -m "{{.VERSION}} Commit"
        ignore_error: true
      # - git tag {{.VERSION}}
      - git push
      - git push --tags
      - task: release-create

  release-create:
    desc: "Create a GitHub release with all binaries"
    cmds:
      - task: build-all
      - gh release create {{.VERSION}} --title "Time-Keypair {{.VERSION}}" --notes "New release of Time-Keypair, a multi-user cron server with data store." ./dist/*

  docker-build:
    desc: Build Docker image
    cmds:
      - docker build -t time-keypair .

  docker-run:
    desc: Run Docker container
    deps: [docker-build]
    cmds:
      - >
        docker run -p {{.PORT | default "8080"}}:8080
        -e PORT=8080
        -e SUPER_ADMIN_KEY={{.SUPER_ADMIN_KEY | default "super_admin_key"}}
        -e CONFIG_FILE_PATH={{.CONFIG_FILE_PATH | default "/config/config.json"}}
        -e AUTO_SAVE_INTERVAL={{.AUTO_SAVE_INTERVAL | default "60"}}
        -v {{.PWD}}/config:/config
        time-keypair

  docker-compose-up:
    desc: Run with Docker Compose
    cmds:
      - docker-compose up -d

  docker-compose-down:
    desc: Stop Docker Compose services
    cmds:
      - docker-compose down

  docker-build-ghcr:
    cmds:
      - docker build . -t ghcr.io/{{.GITHUB_USER}}/time-keypair:latest

  docker-build-ghcr-arm64:
    env:
      GOOS: linux
      GOARCH: arm64
    cmds:
      - docker build . -t ghcr.io/{{.GITHUB_USER}}/time-keypair:arm64-latest

  docker-push:
    deps: [docker-build-ghcr]
    cmds:
      - docker push ghcr.io/{{.GITHUB_USER}}/time-keypair:latest

  docker-push-arm64:
    deps: [docker-build-ghcr-arm64]
    cmds:
      - docker push ghcr.io/{{.GITHUB_USER}}/time-keypair:arm64-latest
