[1;33mMaking sure test scripts are executable...[0m

[1;33m==========================================[0m
[1;33mRunning Unit Tests...[0m
[1;33m==========================================[0m

?   	data-cron-server	[no test files]
?   	data-cron-server/api	[no test files]
=== RUN   TestAuthenticateSuperAdmin
--- PASS: TestAuthenticateSuperAdmin (0.00s)
=== RUN   TestAuthenticateUser
--- PASS: TestAuthenticateUser (0.00s)
=== RUN   TestRequireSuperAdmin
--- PASS: TestRequireSuperAdmin (0.00s)
=== RUN   TestRequireUser
--- PASS: TestRequireUser (0.00s)
=== RUN   TestUserContext
--- PASS: TestUserContext (0.00s)
PASS
ok  	data-cron-server/auth	0.768s
=== RUN   TestNewConfig
--- PASS: TestNewConfig (0.00s)
=== RUN   TestCreateUser
--- PASS: TestCreateUser (0.00s)
=== RUN   TestGetUser
--- PASS: TestGetUser (0.00s)
=== RUN   TestDeleteUser
--- PASS: TestDeleteUser (0.00s)
=== RUN   TestSaveAndLoadConfig
--- PASS: TestSaveAndLoadConfig (0.02s)
PASS
ok  	data-cron-server/config	0.624s
?   	data-cron-server/cron	[no test files]
?   	data-cron-server/models	[no test files]
?   	data-cron-server/utils	[no test files]

[0;32mâœ“ Unit Tests completed successfully[0m


[1;33m==========================================[0m
[1;33mRunning API Functionality Tests...[0m
[1;33m==========================================[0m

Testing Multi-User Cron Server API
==================================

Testing health endpoint...
OK

Creating a new user: test_user...


Getting all users...
[
  "test_user"
]


Creating a new cron job...


Getting all jobs for user test_user...
[
  {
    "id": "job1",
    "cron": "0 */5 * * * *",
    "url": "https://example.com",
    "active": true
  }
]


Storing data...


Getting data...
{
  "notifications": true,
  "theme": "dark"
}


Getting job status...
{
  "job1": {
    "last_run": "0001-01-01T00:00:00Z",
    "last_success": false,
    "next_run": "2025-03-29T13:35:00+01:00"
  }
}


Creating an inactive job...


Updating existing job...


Getting specific job after update...
{
  "id": "job1",
  "cron": "0 */10 * * * *",
  "url": "https://example.com/updated",
  "active": true
}


Storing nested data...


Getting nested data...
{
  "contact": {
    "email": "john@example.com",
    "phone": "555-1234"
  },
  "name": "John Doe",
  "preferences": {
    "language": "en",
    "timezone": "UTC"
  }
}


Listing data keys...
[
  "user_profile",
  "settings"
]


Deleting a job...


Creating another user...


Getting all users (should show both)...
[
  "test_user",
  "user2"
]


Getting full configuration...
{
  "test_user": {
    "cron": [
      {
        "id": "job1",
        "cron": "0 */10 * * * *",
        "url": "https://example.com/updated",
        "active": true
      }
    ],
    "data": {
      "settings": {
        "notifications": true,
        "theme": "dark"
      },
      "user_profile": {
        "contact": {
          "email": "john@example.com",
          "phone": "555-1234"
        },
        "name": "John Doe",
        "preferences": {
          "language": "en",
          "timezone": "UTC"
        }
      }
    }
  },
  "user2": {
    "cron": [],
    "data": {}
  }
}


Deleting a user...
404 page not found


Getting all users after deletion...
[
  "test_user",
  "user2"
]


Tests completed!

[0;32mâœ“ API Functionality Tests completed successfully[0m


[1;33m==========================================[0m
[1;33mRunning Load Tests...[0m
[1;33m==========================================[0m

Load Testing Multi-User Cron Server API
=======================================

Creating 5 users...

Verifying all users were created...
[
  "test_user",
  "user2",
  "load_user_1",
  "load_user_2",
  "load_user_3",
  "load_user_4",
  "load_user_5"
]

Creating 10 jobs for each user (total: 50)...

Storing 10 data items for each user (total: 50)...

Testing concurrent updates to a single job...

Checking final state of the concurrently updated job...
{
  "id": "job_1",
  "cron": "0 10 * * * *",
  "url": "https://example.com/updated_10_1743251669",
  "active": true
}

Testing concurrent updates to user data...

Checking final state of concurrently updated data...
{
  "counter": 10,
  "timestamp": "1743251671"
}

Getting job status for a user...
{
  "job_1": {
    "last_run": "0001-01-01T00:00:00Z",
    "last_success": false,
    "next_run": "2025-03-29T14:10:00+01:00"
  },
  "job_3": {
    "last_run": "0001-01-01T00:00:00Z",
    "last_success": false,
    "next_run": "2025-03-29T14:15:00+01:00"
  },
  "job_5": {
    "last_run": "0001-01-01T00:00:00Z",
    "last_success": false,
    "next_run": "2025-03-29T14:25:00+01:00"
  },
  "job_7": {
    "last_run": "0001-01-01T00:00:00Z",
    "last_success": false,
    "next_run": "2025-03-29T13:35:00+01:00"
  },
  "job_9": {
    "last_run": "0001-01-01T00:00:00Z",
    "last_success": false,
    "next_run": "2025-03-29T13:45:00+01:00"
  }
}

Verifying data keys for a user...
[
  "data_key_5",
  "data_key_1",
  "data_key_2",
  "data_key_4",
  "data_key_3",
  "data_key_7",
  "data_key_9",
  "data_key_10",
  "data_key_8",
  "data_key_6",
  "concurrent_test"
]

Getting full configuration...
{
  "load_user_1": {
    "cron": [
      {
        "id": "job_1",
        "cron": "0 10 * * * *",
        "url": "https://example.com/updated_10_1743251669",
        "active": true
      },
      {
        "id": "job_2",
        "cron": "0 10 * * * *",
        "url": "https://example.com/load_user_1/job_2",
        "active": false
      },
      {
        "id": "job_3",
        "cron": "0 15 * * * *",
        "url": "https://example.com/load_user_1/job_3",
        "active": true
... (truncated for brevity)

Cleaning up - Deleting all load test users...
404 page not found
404 page not found
404 page not found
404 page not found
404 page not found

Load test completed!

[0;32mâœ“ Load Tests completed successfully[0m


[1;33m==========================================[0m
[1;33mRunning Error Handling Tests...[0m
[1;33m==========================================[0m

Error Handling Test for Multi-User Cron Server API
==================================================

Creating test user...


1. Testing invalid super admin key...
Status code: 401
Response: Unauthorized



2. Testing invalid user key...
Status code: 401
Response: Unauthorized



3. Testing non-existent job...
Status code: 404
Response: Job not found



4. Testing invalid cron expression...
Status code: 400
Response: Invalid cron expression: expected at least 5 fields, found 2: [invalid cron]



5. Testing missing required fields in job...
Status code: 400
Response: Cron expression is required



6. Testing access to non-existent data...
Status code: 404
Response: Data not found



7. Testing invalid JSON in request body...
Status code: 400
Response: Invalid request body



8. Testing deletion of non-existent user...
Status code: 404
Response: 404 page not found



9. Testing deletion of non-existent job...
Status code: 404
Response: Job not found



10. Testing method not allowed...
Status code: 405
Response: Method not allowed



Cleaning up - Deleting test user...
404 page not found


Error handling tests completed!

[0;32mâœ“ Error Handling Tests completed successfully[0m


[1;33m==========================================[0m
[0;32mAll tests passed successfully![0m
[1;33m==========================================[0m

